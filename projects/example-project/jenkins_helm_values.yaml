controller:
  # Used for label app.kubernetes.io/component
  componentName: "jenkins-controller"
  image: "jenkins/jenkins"
  tag: "lts"
  imagePullPolicy: "Always"
  imagePullSecretName: 
  # need 1 executor as default to execute the seed job
  numExecutors: 1
  # must be exclusive for jobs distribution
  executorMode: "EXCLUSIVE"

  # give a custom label to the controller instance, that the seed job can run in it
  customJenkinsLabels: [
    "jenkins-controller-for-seed"
  ]
  # Define a admin password here. Normally it does not matter who has access, because settings can be reloaded from the repository.
  # But for security reasons try to use a password, that is not easy and avoid to give anonymous read access to the project where Jenkins is located.
  adminPassword: "admin"
  # because we want to "proxy" jenkins via ingress routing, we have to set the Uri Prefix here
  jenkinsUriPrefix: "/jenkins"
  installPlugins:
    - authorize-project:latest
    - blueocean:latest
    - blueocean-bitbucket-pipeline:latest
    - configuration-as-code:latest
    - credentials-binding:latest
    - cucumber-reports:latest
    - docker-build-step:latest
    - git:latest
    - job-dsl:latest
    - kubernetes:latest
    - kubernetes-credentials-provider:latest
    - kubernetes-cd:latest
    - metrics:latest
    - multiple-scms:latest
    - pipeline-config-history:latest
    - role-strategy:latest
    - sonar:latest
    - ssh-agent:latest
    - stashNotifier:latest
    - workflow-aggregator:latest
    - workflow-job:latest
  initScripts: [
    # disable script approval; it is necessary to add the ";" at the end, because helm parses the script in one line!
    import javaposse.jobdsl.plugin.GlobalJobDslSecurityConfiguration;
      import jenkins.model.GlobalConfiguration;
      GlobalConfiguration.all().get(GlobalJobDslSecurityConfiguration.class).useScriptSecurity=false;
      GlobalConfiguration.all().get(GlobalJobDslSecurityConfiguration.class).save();
  ]
  JCasC:
    enabled: true
    # Define, if we want to allow anonymous read access
    authorizationStrategy: |-
      loggedInUsersCanDoAnything:
        allowAnonymousRead: true
  sidecars:
    configAutoReload:
      enabled: false
      # folder in the pod that should hold the collected dashboards:
      folder: "https://raw.githubusercontent.com/Ragin-LundF/k8s-jcasc-mgmt-example/main/projects/example-project/jcasc_config.yaml"

persistence:
  existingClaim: pvc-example-project
  storageClass: hostpath
  accessMode: ReadWriteOnce
  size: 1Gi

## Install Default RBAC roles and bindings
rbac:
  create: true
  readSecrets: true

# To let the jenkins deploy and to automate everything, create the service account.
serviceAccountAgent:
  # Specifies whether a ServiceAccount should be created
  create: true

k8smanagement:
  rbac:
    # list of additional namespaces that should be deployable (adds RBAC roles to those namespaces)
    additionalNamespaces: {}
