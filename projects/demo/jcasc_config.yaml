jenkins:
  systemMessage: "Welcome to the Demo"
  labelString: "jenkins-controller-for-seed"
  mode: "EXCLUSIVE"

  authorizationStrategy:
    roleBased:
      roles:
        global:
          - name: "admin"
            description: "Jenkins administrators"
            permissions:
              - "Overall/Administer"
            assignments:
              - "admin"
          - name: "readonly"
            description: "Read-only users"
            permissions:
              - "Overall/Read"
              - "Job/Read"
            assignments:
              - "authenticated"
        items:
          - name: "Project User"
            description: "User for the project"
            pattern: ".*"
            permissions:
              - "Job/Build"
            assignments:
              - "project-user"
  securityRealm:
    local:
      allowsSignup: false
      users:
        - id: "admin"
          password: "#jbcrypt:$2a$04$UNxiNvJN6R3me9vybVQr/OzpMhgobih8qbxDpGy3lZmmmwc6t48ty"
        - id: "project-user"
          password: "#jbcrypt:$2a$04$BFPq6fSa9KGKrlIktz/C8eSFrrG/gglnW1eXWMSjgtCSx36mMOSNm"

  clouds:
    - kubernetes:
        name: "jenkins-build-nodes"
        serverUrl: ""
        serverCertificate:
        directConnection: false
        skipTlsVerify: true
        namespace: "demo"
        jenkinsUrl: "http://jenkins-controller:8080"
        maxRequestsPerHostStr: 64
        retentionTimeout: 5
        connectTimeout: 10
        readTimeout: 20
        templates:
          - name: "gradle_java_node"
            serviceAccount: "jenkins-controller-agent"
            instanceCap: 10
            idleMinutes: 0
            slaveConnectTimeout: "500"
            label: "gradle_java_node"
            inheritFrom: "pipeline-base-container"
            containers:
              # add container with the name 'gradle'. This can be used in the pipeline to execute commands on this container
              - name: "gradle"
                image: "ghcr.io/ragin-lundf/k8s-jenkins-docker/k8s-jcasc-jenkins-build-java-gradle:latest"
                privileged: false
                alwaysPullImage: true
                workingDir: "/home/jenkins/agent"
                runAsUser: "1000"
                runAsGroup: "1000"
                command: ""
                args: ""
                ttyEnabled: true
                resourceRequestCpu: "500m"
                resourceLimitCpu: "3000m"
                resourceRequestMemory: "128Mi"
                resourceLimitMemory: "1Gi"
              - name: "node"
                image: "ghcr.io/ragin-lundf/k8s-jenkins-docker/k8s-jcasc-jenkins-build-node:latest"
                privileged: false
                alwaysPullImage: true
                workingDir: "/home/jenkins/agent"
                runAsUser: "1000"
                runAsGroup: "1000"
                command: ""
                args: ""
                ttyEnabled: true
                resourceRequestCpu: "100m"
                resourceLimitCpu: "2000m"
                resourceRequestMemory: "128Mi"
                resourceLimitMemory: "500Mi"
          # POD with pipeline base container. Add here container, that you need in multiple build environments (like docker).
          # Add this name as 'inheritFrom: "pipeline-base-container"' to the other container to inherit all defined containers of
          # this POD.
          - name: "pipeline-base-container"
            serviceAccount: "jenkins-controller-agent"
            instanceCap: 10
            idleMinutes: 0
            slaveConnectTimeout: "500"
            label: "pipeline-base-container"
            # add the Docker sockets to the hostPathVolume, that we can use docker commands
            volumes:
              - hostPathVolume:
                  mountPath: "/var/run/docker.sock"
                  hostPath: "/var/run/docker.sock"
            containers:
              # If you want to have all deployed build container under your control, you need a JNLP container with the name "jnlp".
              # This is required by the kubernetes plugin of Jenkins.
              # By defining this container here and doing always an 'inheritFrom: "pipeline-base-container"', it is possible to add
              # an own image here, that is located in an private registry to have the full control over the used containers and their versions.
              - name: "jnlp"
                image: "jenkins/jnlp-slave:latest"
                privileged: false
                alwaysPullImage: true
                workingDir: "/home/jenkins/agent"
                runAsUser: "1000"
                runAsGroup: "1000"
                command: ""
                args: ""
                ttyEnabled: true
                resourceRequestCpu: "200m"
                resourceLimitCpu: "500m"
                resourceRequestMemory: "128Mi"
                resourceLimitMemory: "512Mi"
              # It is recommended to deploy Docker in a separate container, because it needs privileged execution and root.
              # You also can try to bring the rootless container up to life, but this is more tricky.
              # With this special configuration the other build containers do not need root or privileged deployments.
              - name: "docker"
                image: "ghcr.io/ragin-lundf/k8s-jenkins-docker/k8s-jcasc-jenkins-build-docker:latest"
                privileged: true
                alwaysPullImage: true
                workingDir: "/home/jenkins/agent"
                runAsUser: "0"
                runAsGroup: "0"
                command: ""
                args: ""
                ttyEnabled: true
                resourceRequestCpu: "500m"
                resourceLimitCpu: "1500m"
                resourceRequestMemory: "128Mi"
                resourceLimitMemory: "500Mi"
            # Those variables are required for the communication with the agents
            envVars:
              - envVar:
                  key: "JENKINS_URL"
                  value: "http://jenkins-controller:8080/jenkins"
              - envVar:
                  key: "JENKINS_TUNNEL"
                  value: "jenkins-controller-agent:50000"

# JcasC configuration for unclassified plugins
unclassified:
  # URL under which the Jenkins is reachable.
  # This URL will also be used for notifying the VCS like Github or Bitbucket to link to build number results.
  location:
    url: "http://10.15.15.1/jenkins"

  # Definition of the metrics plugin to monitor Jenkins via Prometheus
  metricsaccesskey:
    accessKeys:
      - key: "a71f35bb-f65a-4085-b3a6-e1863a4784f8"
        description: "API Token to access metrics with Prometheus"
        canPing: true
        canThreadDump: false
        canHealthCheck: true
        canMetrics: false
        origins: "*"

  # Definition of a global pipeline library
  globalLibraries:
    libraries:
      # defaultVersion is the stable branch name
      - defaultVersion: "main"
        name: "my-pipeline-library"
        implicit: false
        allowVersionOverride: true
        includeInChangesets: false
        retriever:
          modernSCM:
            scm:
              git:
                id: "my-pipeline-library"
                remote: "https://github.com/Ragin-LundF/k8s-jcasc-pipeline-library.git"
                credentialsId: "vcs-notification-credentialsid"

  # Definition of a sonar server if required
  sonarglobalconfiguration:
    buildWrapperEnabled: true
    installations:
      - name: "SonarQube Server"
        serverUrl: "https://sonar.company.net:9000"
        serverAuthenticationToken: "mytoken"
        credentialsId: token-sonarqube
        webhookSecretId: webhook
        mojoVersion: ""
        additionalAnalysisProperties: ""
        additionalProperties: ""
        triggers:
          envVar: ""
          skipScmCause: false
          skipUpstreamCause: false


# JobDSL definition of the seed-job.
# This job creates all other jobs from a Bitbucket repository.
# With this mechanism, it is possible to have a simple job definition in your VCS and there is no need to make
# backups of the jobs. Simply redeploy Jenkins and everything runs as before.
# This job will also be used to add/delete jobs by simply adding new job definitions to the job file in this repository.
jobs:
  - script: >
      job('seed_job') {
          label('jenkins-controller-for-seed')
          logRotator {
              numToKeep(5)
              artifactNumToKeep(1)
          }
          multiscm {
              git {
                  remote {
                      url('https://github.com/Ragin-LundF/jenkins-jobdsl-remote.git')
                      credentials("vcs-notification-credentialsid")
                  }
                  extensions {
                    relativeTargetDirectory('jobdslscript')
                  }
              }
              git {
                  remote {
                      url('https://github.com/Ragin-LundF/k8s-jcasc-mgmt-example.git')
                      credentials("vcs-notification-credentialsid")
                  }
                  extensions {
                    relativeTargetDirectory('jobdefinition')
                  }
              }
          }
          steps {
              dsl {
                  lookupStrategy('SEED_JOB')
                  external('jobdslscript/src/JenkinsJobDslRemote.groovy')
              }
          }
          triggers {
              scm('* * * * *')
          }
      }
